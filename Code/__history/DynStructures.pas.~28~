unit DynStructures;

interface

type
  // Тип односвязный список с натуральными числами
  TPList = ^TItem;

  TItem = record
    Elem: Cardinal;
    Next: TPList;
  end;

  // Тип стека с целыми числами
  TStack = TPList;

procedure InitList(var List: TPList);
procedure DestroyList(var List: TPList);
procedure Push(var Stack: TStack; n: Integer);
function Pop(var Stack: TStack): Cardinal;
function isEmpty(const List: TPList): Boolean;

implementation

{ Процедура добавления элемента в стек }
procedure Push;
var
  t: TStack; // Добавляемый элемент стека
begin

  // Инициализация нового элемента
  New(t);
  t.Elem := n;
  t.Next := nil;

  // Перемещение вершины стека
  if not isEmpty(Stack) then
    t.Next := Stack;
  Stack := t;

end;

{ Функция извлечения значения вершины стека с удалением }
function Pop;
var
  t: TStack; // Извлекаемый из стека элемент
begin

  if not isEmpty(Stack) then
  begin
    // Перемещение вершины стека
    t := Stack;
    Stack := Stack.Next;

    // Извлечение элемента с очисткой указателя
    Result := t.Elem;
    Dispose(t);
  end
  else
    Result := 0;

end;

{ Функция проверки динамической структуры на пустоту }
function isEmpty;
begin
  Result := List = nil;
end;

{ Процедура инициализации списка }
procedure InitList;
begin
  List := nil;
end;

procedure DestroyList;
var
  t: TPList;
begin
  // TODO 1: Добавить очистку списка
end;

end.
