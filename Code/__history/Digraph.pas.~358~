unit Digraph;

interface

uses System.Types, DynStructures, System.SysUtils;

const
  INFINITY = 1000000;

type

  // Тип списка смежности
  TAdjList = TList;

  // Тип вершины графа
  TVerticeList = ^TVerticeNode;

  TVerticeNode = record
    Center: TPoint;
    Number: Integer;
    AdjList: TAdjList;
    Next: TVerticeList;
    Deg: Integer;
  end;

  // Тип ориентированный граф
  TGraph = record
    Head: TVerticeList;
    Order: Integer;
  end;

  // Тип матрицы весов
  TWeights = array of array of Integer;

  { Процедура получения вершины по номеру }
procedure GetByNumber(const G: TGraph; v: Integer; out Vertice: TVerticeList);

{ Процедура нахождения вершины и её координаты по точке на холсте }
procedure Centralize(const G: TGraph; var P: TPoint; R: Integer;
  out v: Integer);

{ Функция получения центра вершины }
function GetCenter(const G: TGraph; v: Integer): TPoint;

{ Функция вычисления расстояния между двумя точками в пикселях }
function Distance(const p1, p2: TPoint): Integer;

{ Процедура добавления вершины в граф }
procedure AddNode(var G: TGraph; const C: TPoint);

{ Процедура добавления дуги в граф }
procedure AddLink(var G: TGraph; v, u: Integer);

{ Процедура удаления вершины из графа }
procedure DeleteNode(var G: TGraph; v: Integer);

{ Процедура удаления дуги из графа }
procedure DeleteLink(var G: TGraph; v, u: Integer);

{ Процедура инициализации графа }
procedure InitializeGraph(var G: TGraph);

{ Процедура очищения графа }
procedure DestroyGraph(var G: TGraph);

{ Процедура преобразования графа в матрицу весов }
procedure ToWeightMatrix(const G: TGraph; out Matrix: TWeights);

implementation

function Distance(const p1, p2: TPoint): Integer;
begin
  Result := Round(Sqrt(Sqr(p2.x - p1.x) + Sqr(p2.y - p1.y)));
end;

{ Функция нахождения вершины по номеру в списке }
procedure GetByNumber(const G: TGraph; v: Integer; out Vertice: TVerticeList);
begin
  Vertice := G.Head;

  // Цикл А1. Поиск вершины с данным номером
  while (Vertice <> nil) and (Vertice.Number <> v) do
  begin
    Vertice := Vertice.Next;
  end; // Конец А1

end;

procedure Centralize(const G: TGraph; var P: TPoint; R: Integer;
  out v: Integer);
var
  Vertice, Found: TVerticeList;
  isFound: Boolean;
begin
  Vertice := G.Head;
  isFound := False;
  Found := nil;

  // Цикл А1. Поиск последней вершины с близкими координатами
  while Vertice <> nil do
  begin
    isFound := Distance(Vertice.Center, P) <= R;
    if isFound then
      Found := Vertice;
    Vertice := Vertice.Next;
  end; // Конец А1

  // Возврат найденной вершины
  if Found <> nil then
  begin
    v := Found.Number;
    P := Found.Center;
  end
  else
    v := 0; // Вершина не была найдена
end;

function GetCenter(const G: TGraph; v: Integer): TPoint;
var
  Vertice: TVerticeList;
begin
  GetByNumber(G, v, Vertice);
  if Vertice <> nil then
    Result := Vertice.Center;
end;

procedure AddNode(var G: TGraph; const C: TPoint);
var
  Vertice: TVerticeList;
begin
  Inc(G.Order);

  // Инициализация новой вершины
  New(Vertice);
  with Vertice^ do
  begin
    Center := C;
    Number := G.Order;
    AdjList := nil;
    Next := G.Head;
    Deg := 0;
  end;

  // Запись новой вершины
  G.Head := Vertice;

end;

procedure AddLink(var G: TGraph; v, u: Integer);
var
  Vertice: TVerticeList;
  PrevArc, Arc: TList;
  isFound: Boolean;
begin

  // Получение вершины
  GetByNumber(G, v, Vertice);
  Inc(Vertice.Deg);

  // Сохранение соседа в список смежности
  Push(Vertice.AdjList, u);

end;

procedure DeleteNode(var G: TGraph; v: Integer);
var
  PrevVertice, Vertice: TVerticeList;
  PrevArc, Arc: TAdjList;
begin
  Dec(G.Order);
  if v = G.Head.Number then
  begin
    Vertice := G.Head;
    G.Head := G.Head.Next;
  end
  else
  begin
    GetByNumber(G, v + 1, PrevVertice);
    Vertice := PrevVertice.Next;
    PrevVertice.Next := Vertice.Next;
  end;

  DestroyList(Vertice.AdjList);
  Dispose(Vertice);

  Vertice := G.Head;
  while Vertice <> nil do
  begin
    if Vertice.Number > v then
      Dec(Vertice.Number);

    PrevArc := nil;
    Arc := Vertice.AdjList;
    while Arc <> nil do
    begin
      if Arc.Number = v then
      begin
        if PrevArc = nil then
          Vertice.AdjList := Arc.Next
        else
          PrevArc.Next := Arc.Next;
        Dispose(Arc);
      end
      else if Arc.Number > v then
        Dec(Arc.Number);

      PrevArc := Arc;
      Arc := Arc.Next;
    end;
    Vertice := Vertice.Next;
  end;
end;

procedure DeleteLink(var G: TGraph; v, u: Integer);
var
  Vertice: TVerticeList;
  Arc, PrevArc: TList;
  isFound: Boolean;
begin

  // Получение начала дуги
  GetByNumber(G, v, Vertice);

  Dec(Vertice.Deg);

  // Получение первого соседа
  PrevArc := Vertice.AdjList;

  // Поиск звена перед звеном с искомым соседом
  if (PrevArc = nil) or (PrevArc.Number = u) then
  begin
    if PrevArc <> nil then
      Vertice.AdjList := PrevArc.Next
    else
      Vertice.AdjList := nil;
  end
  else
  begin

    isFound := (PrevArc.Next.Number = u) or (PrevArc = nil);

    // Получение предыдущего соседа удаляемого
    while not isFound do
    begin
      PrevArc := PrevArc.Next;
      isFound := (PrevArc = nil) or (PrevArc.Next.Number = u);
    end;

    Arc := PrevArc.Next;
    PrevArc.Next := Arc.Next;
  end;

  // Удаление соседа
  if not(Arc = nil) then
  begin
    Dispose(Arc);
  end;

end;

procedure InitializeGraph(var G: TGraph);
begin
  G.Head := nil;
  G.Order := 0;
end;

procedure DestroyGraph(var G: TGraph);
var
  Vertice: TVerticeList;
begin

  // Цикл А1. Освобождение списка вершин
  while G.Head <> nil do
  begin
    Vertice := G.Head;

    // Цикл А2. Освобождение списка соседей вершины
    DestroyList(Vertice.AdjList);

    G.Head := G.Head.Next;
    Dispose(Vertice);
  end; // Конец А1
end;

procedure ToWeightMatrix(const G: TGraph; out Matrix: TWeights);
var
  v, u: Integer;
  Vertice: TVerticeList;
  Arc: TList;
begin

  // Инициализация матрицы
  SetLength(Matrix, G.Order, G.Order);

  for v := 1 to G.Order do
  begin
    for u := 1 to G.Order do
      Matrix[v - 1, u - 1] := INFINITY;
  end;

  // Цикл А2. Проход по вершинам
  Vertice := G.Head;
  while Vertice <> nil do
  begin

    // Цикл B2. Сохранение весов существующих рёбер
    Arc := Vertice.AdjList;
    while Arc <> nil do
    begin
      Matrix[Vertice.Number - 1, Arc.Number - 1] := 1;
      Arc := Arc.Next;
    end; // Конец B2

    // Переход к следующей вершине
    Vertice := Vertice.Next;
  end; // Конец А1
end;

end.
