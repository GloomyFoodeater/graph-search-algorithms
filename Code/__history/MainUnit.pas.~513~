unit MainUnit;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, StdCtrls, Buttons, Menus, GraphSearch, Digraph,
  DynStructures, GraphDrawing, AboutForm;

type

  // Тип режима работы с графом
  TClickState = (stAddVertice, stAddArc, stDeleteVertice, stDeleteArc, stDFS,
    stBFS, stDijkstra, stNone);
  TVerFile = File of TVertice;
  TArcFile = File of TItem;

  TfmEditor = class(TForm)
    plFunctionsContainer: TPanel;
    AddNodeBtn: TSpeedButton;
    AddLinkBtn: TSpeedButton;
    DeleteNodeBtn: TSpeedButton;
    DeleteLinkBtn: TSpeedButton;
    DFSBtn: TSpeedButton;
    BFSbtn: TSpeedButton;
    DijkstraBtn: TSpeedButton;
    mmMain: TMainMenu;
    nFile: TMenuItem;
    nEdit: TMenuItem;
    nHelp: TMenuItem;
    nSave: TMenuItem;
    nExit: TMenuItem;
    nClear: TMenuItem;
    nAbout: TMenuItem;
    N1: TMenuItem;
    nOpen: TMenuItem;
    nSaveAs: TMenuItem;
    sdVertices: TSaveDialog;
    sdArcs: TSaveDialog;
    odVertices: TOpenDialog;
    odArcs: TOpenDialog;
    Label1: TLabel;
    Label2: TLabel;
    pbCanvas: TPaintBox;
    procedure fmEditorCreate(Sender: TObject);
    procedure fmEditorClose(Sender: TObject; var Action: TCloseAction);
    procedure SetClickState(Sender: TObject);
    procedure pbCanvasClick(Sender: TObject);
    procedure nExitClick(Sender: TObject);
    procedure nClearClick(Sender: TObject);
    procedure nOpenClick(Sender: TObject);
    procedure nSaveClick(Sender: TObject);
    procedure nSaveAsClick(Sender: TObject);
    procedure nAboutClick(Sender: TObject);
    procedure pbCanvasPaint(Sender: TObject);
  private
    State: TClickState; // Переменная состояния для работы с графом
    Graph: TGraph; // Граф для редактирования
    VStart: TPVertice; // Указатель на запомненную вершину
    VerticesFileName, ArcsFileName: String; // Последние имена файлов

    function StartSearch(const Graph: TGraph; State: TClickState;
      v, u: Integer): Boolean;
    function OpenGraph(var fVertices: TVerFile; var fArcs: TArcFile): Boolean;
    procedure SaveGraph(var fVertices: TVerFile; var fArcs: TArcFile);
  end;

var
  fmEditor: TfmEditor;

implementation

{$R *.dfm}

// Вспомогательная функция для вызова процедур поиска
function TfmEditor.StartSearch(const Graph: TGraph; State: TClickState;
  v, u: Integer): Boolean;
var
  Weights: TWeights; // Матрица весов
  Path: TStack; // Пройденный путь
  Vertice: TPVertice; // Указатель на вершину
begin
  ToWeightMatrix(Graph, Weights); // Преобразование в матрицу расстояний

  // Выбор алгоритма поиска
  case State of
    stDFS:
      DFS(Weights, v, u, Path);
    stBFS:
      BFS(Weights, v, u, Path);
    stDijkstra:
      Dijkstra(Weights, v, u, Path);
  end;

  // Результат о достижимости конечной вершины
  Result := not isEmpty(Path);

  // Цикл А1. Перекраска вершин пути
  while not isEmpty(Path) do
  begin
    v := Pop(Path);
    GetByNumber(Graph, v, Vertice);
    Vertice.Design := dgVisited;
  end; // Конец А1

end;

// Метод создания формы
procedure TfmEditor.fmEditorCreate(Sender: TObject);
begin

  State := stNone;
  InitializeGraph(Graph, 40);
  VerticesFileName := '';
  ArcsFileName := '';
  VStart := nil;
end;

// Метод закрытия формы
procedure TfmEditor.fmEditorClose(Sender: TObject; var Action: TCloseAction);
begin
  DestroyGraph(Graph); // Освобождение занятой памяти
end;

// Метод получения переменной состояния через кнопки на панели
procedure TfmEditor.SetClickState(Sender: TObject);
var
  i: Integer; // Номер кнопки на панели
  Child: TControl; // Список контролов на панели
begin

  if Graph.isPainted or (VStart <> nil) then
  begin
    if VStart <> nil then
      VStart.Design := dgPassive
    else
      Graph.isPainted := false;
    pbCanvas.Invalidate;
  end;

  // Инициализация режима работы и начальной вершины
  VStart := nil;
  State := stNone;

  // Цикл А1. Перебор контролов панели
  for i := 0 to plFunctionsContainer.ControlCount - 1 do
  begin
    Child := plFunctionsContainer.Controls[i];
    if (Child is TSpeedButton) and (Child as TSpeedButton).Down then
      State := TClickState(i);
  end; // Конец А1
end;

// Основной метод для редактирования графа
procedure TfmEditor.pbCanvasClick(Sender: TObject);
var
  Pos: TPoint; // Позиция курсора мыши
  VEnd: TPVertice; // Указатель на вершину
  isFound: Boolean; // Флаг о достижимости вершины при поиске
begin

  // Перебор переменной состояния
  Pos := ScreenToClient(Mouse.CursorPos);

  case State of
    stAddVertice: // Добавление вершины
      AddVertice(Graph, Pos);
    stDeleteVertice: // Удаление вершины
      if Centralize(Graph, Pos, VEnd) then
        DeleteVertice(Graph, VEnd.Number);
    stAddArc, stDeleteArc, stDFS, stBFS, stDijkstra: // Действия по 2-м вершинам
      begin
        if VStart = nil then
        begin
          if Centralize(Graph, Pos, VStart) then
            VStart.Design := dgActive;
        end
        else if Centralize(Graph, Pos, VEnd) then
        begin
          VStart.Design := dgPassive;

          // Перебор переменной состояния
          case State of
            stAddArc: // Добавление дуги
              AddArc(Graph, VStart.Number, VEnd.Number);
            stDeleteArc: // Удаление дуги
              DeleteArc(Graph, VStart.Number, VEnd.Number);
            stDFS, stBFS, stDijkstra: // Алгоритмы поиска
              begin
                isFound := StartSearch(Graph, State, VStart.Number,
                  VEnd.Number);
                if not isFound then
                  ShowMessage('Путь не найден.')
                else
                  Graph.isPainted := true;
              end;
          end; // Конец case

          // Сброс начальной вершины
          VStart := nil;
        end; // Конец else if

      end;
  end; // Конец case

  if State <> stNone then
    pbCanvas.Invalidate;

end;

procedure TfmEditor.nOpenClick(Sender: TObject);
var
  fVertices: TVerFile;
  fArcs: TArcFile;
  isSuccess: Boolean;
begin
  odVertices.FileName := '';
  odArcs.FileName := '';

  // Выбор файла с вершинами
  if not odVertices.Execute then
    Exit;

  // Проверка корректности расширения
  if ExtractFileExt(odVertices.FileName) <> '.ver' then
  begin
    ShowMessage('Выбран файл с неверным расширением.');
    Exit;
  end;

  // Выбор файла с дугами
  if not odArcs.Execute then
    Exit;

  // Проверка корректности расширения
  if ExtractFileExt(odArcs.FileName) <> '.arc' then
  begin
    ShowMessage('Выбран файл с неверным расширением.');
    Exit;
  end;

  // Инициализация графа
  DestroyGraph(Graph);
  InitializeGraph(Graph, 40);

  // Подготовка файлов
  System.Assign(fVertices, odVertices.FileName);
  System.Assign(fArcs, odArcs.FileName);
  Reset(fVertices);
  Reset(fArcs);

  // Чтение графа
  isSuccess := OpenGraph(fVertices, fArcs);

  // Обработка ошибки
  if not isSuccess then
  begin
    DestroyGraph(Graph);
    InitializeGraph(Graph, 40);
    ShowMessage('Данные файлов некорректны.');
  end
  else
  begin
    VerticesFileName := odVertices.FileName;
    ArcsFileName := odArcs.FileName;
  end;

  // Закрытие файлов
  CloseFile(fVertices);
  CloseFile(fArcs);

  // Перерисовка графа
  pbCanvas.Invalidate;

end;

procedure TfmEditor.nSaveAsClick(Sender: TObject);
begin

  sdVertices.FileName := '';
  sdArcs.FileName := '';

  // Выбор файла с вершинами
  if not sdVertices.Execute then
    Exit;

  // Проверка корректности расширения
  if ExtractFileExt(sdVertices.FileName) <> '.ver' then
  begin
    ShowMessage('Выбран файл с неверным расширением.');
    Exit;
  end;

  // Выбор файла с дугами
  if not sdArcs.Execute then
    Exit;

  // Проверка корректности расширения
  if ExtractFileExt(sdArcs.FileName) <> '.arc' then
  begin
    ShowMessage('Выбран файл с неверным расширением.');
    Exit;
  end;

  // Сохранение путей к файлу и сохранение графа
  VerticesFileName := sdVertices.FileName;
  ArcsFileName := sdArcs.FileName;
  nSaveClick(Sender);

end;

procedure TfmEditor.nSaveClick(Sender: TObject);
var
  fVertices: TVerFile;
  fArcs: TArcFile;
  isSuccess: Boolean;
begin

  // Переход к "сохранению как"
  if (VerticesFileName = '') or (ArcsFileName = '') then
  begin
    Self.nSaveAsClick(Sender);
    Exit
  end;

  // Подготовка файлов
  System.Assign(fVertices, VerticesFileName);
  System.Assign(fArcs, ArcsFileName);
  Rewrite(fVertices);
  Rewrite(fArcs);

  // Сохранение графа
  SaveGraph(fVertices, fArcs);

  // Закрытие файлов
  CloseFile(fVertices);
  CloseFile(fArcs);
end;

// Метод очистки холста
procedure TfmEditor.nAboutClick(Sender: TObject);
begin
  frmAbout.Show;
end;

procedure TfmEditor.nClearClick(Sender: TObject);
begin
  DestroyGraph(Graph);
  InitializeGraph(Graph, 40);
  pbCanvas.Invalidate;
end;

// Метод выхода из программы
procedure TfmEditor.nExitClick(Sender: TObject);
begin
  Close;
end;

// Метод открытия графа из файла
function TfmEditor.OpenGraph(var fVertices: TVerFile;
  var fArcs: TArcFile): Boolean;
var
  Vertice: TPVertice;
  AdjVertice: TPAdjVertice;
  v: Integer;
begin

  // Цикл А1. Проход по файлу вершин
  Result := true;
  New(Vertice);
  New(AdjVertice);
  while Result and not Eof(fVertices) do
  begin

    // Чтение очередной вершины
    Read(fVertices, Vertice^);
    AddVertice(Graph, Vertice.Center);

    // Проверка корректности прочитанных вершины
    with Vertice^ do
    begin
      Result := Number = Graph.Tail.Number;
      Result := Result and (Center.X >= 0) and (Center.Y >= 0);
    end;

    // Цикл А2. Частичный проход по файлу рёбер
    v := 1;
    while Result and (v <= Vertice.Deg) do
    begin
      Result := not Eof(fArcs); // Проверка на недостаток соседей

      // Чтение очередного соседа
      if Result then
      begin
        Read(fArcs, AdjVertice^);
        AddArc(Graph, Vertice.Number, AdjVertice.Number);
        Inc(v);
        // Переход к следующему соседу
      end;
    end; // Конец А2

    Result := Result and (AdjVertice.Next = nil); // Проверка на избыток соседей

  end; // Конец А1

  Dispose(Vertice);
  Dispose(AdjVertice);
end;

procedure TfmEditor.pbCanvasPaint(Sender: TObject);
begin
  RedrawGraph(pbCanvas.Canvas, pbCanvas.Width, pbCanvas.Height, Graph);
end;

// Метод сохранения графа в файл
procedure TfmEditor.SaveGraph(var fVertices: TVerFile; var fArcs: TArcFile);
var
  Vertice: TPVertice;
  AdjVertice: TPAdjVertice;
begin

  // Цикл А1. Проход по вершинам
  Vertice := Graph.Head;
  while Vertice <> nil do
  begin
    Write(fVertices, Vertice^);

    // Цикл А2. Проход по соседям
    AdjVertice := Vertice.Head;
    while AdjVertice <> nil do
    begin
      Write(fArcs, AdjVertice^);
      AdjVertice := AdjVertice.Next;
    end; // Конец А1
    Vertice := Vertice.Next;
  end; // Конец А2
end;

end.
