unit DynStructures;

interface

type
  // Тип односвязный список с натуральными числами
  TList = ^TNode;

  TNode = record
    Elem: Integer;
    Next: TList;
  end;

  // Тип стек с натуральными числами
  TStack = TList;

  // Тип очередь с натуральными числами
  TQueue = record
    Head: TList;
    Tail: TList;
  end;

  { Процедура инициализации стека }
procedure InitializeStack(var Stack: TStack);

{ Процедура инициализации очереди }
procedure InitializeQueue(var Queue: TQueue);

{ Процедура очищения списка }
procedure DestroyList(var Head: TList);

{ Процедура вставки в стек }
procedure Push(var Stack: TStack; n: Integer);

{ Процедура вставки в очередь }
procedure Enqueue(var Queue: TQueue; n: Integer);

{ Функция извлечения из стека }
function Pop(var Stack: TStack): Integer;

{ Функция извлечения из очереди }
function Dequeue(var Queue: TQueue): Integer;

{ Функция проверки списка на пустоту }
function isEmpty(const Head: TList): Boolean;

implementation

procedure InitializeStack;
begin
  Stack := nil;
end;

procedure InitializeQueue;
begin
  Queue.Head := nil;
  Queue.Tail := nil;
end;

procedure DestroyList;
var
  t: TList;
begin
  // Цикл А1. Освобождение списка
  while Head <> nil do
  begin
    t := Head;
    Head := Head.Next;
    Dispose(t);
  end; // Конец А1
  Head := nil;
end;

procedure Push;
var
  t: TList; // Вставляемое звено списка
begin

  // Инициализация нового элемента
  New(t);
  t.Elem := n;
  t.Next := nil;

  // Перемещение вершины стека
  if not isEmpty(Stack) then
    t.Next := Stack;
  Stack := t;

end;

procedure Enqueue;
var
  t: TList; // Вставляемое звено списка
begin

  // Инициализация нового элемента
  New(t);
  t.Elem := n;
  t.Next := nil;

  // Сохранение нового элемента
  if not isEmpty(Queue.Head) then
    Queue.Tail.Next := t
  else
    Queue.Head := t;

  // Перемещение хвоста
  Queue.Tail := t;
end;

function Pop;
var
  t: TList; // Извлекаемое звено списка
begin

  if not isEmpty(Stack) then
  begin
    // Перемещение вершины стека
    t := Stack;
    Stack := Stack.Next;

    // Извлечение элемента с очисткой указателя
    Result := t.Elem;
    Dispose(t);
  end
  else
    Result := 0; // Ошибка при извлечении

end;

function Dequeue;
var
  t: TList; // Извлекаемое звено списка
begin
  if not isEmpty(Queue.Head) then
  begin

    // Перемещение начала очереди
    with Queue do
    begin
      t := Head;
      Head := Head.Next;
    end;

    // Извлечение элемента с очисткой указателя
    Result := t.Elem;
    Dispose(t);
  end
  else
    Result := 0; // Ошибка при извлечении
end;

function isEmpty;
begin
  Result := Head = nil;
end;

end.
