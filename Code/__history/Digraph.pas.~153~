unit Digraph;

interface

uses System.Types, DynStructures, System.SysUtils;

type

  // Тип списка смежности
  TPAdjList = TPList;

  // Тип вершины графа
  TPNode = ^TNode;

  TNode = record
    Center: TPoint;
    Number: Cardinal;
    Head: TPAdjList;
    Next: TPNode;
  end;

  // Тип простой граф
  TGraph = record
    Head: TPNode;
    Tail: TPNode;
    Order: Cardinal;
  end;

  { Функция нахождения вершины по номеру в списке }
function GetByNumber(const G: TGraph; v: Integer): TPNode;

{ Функция нахождения вершины по точке на холсте }
function GetByPoint(const G: TGraph; P: TPoint): TPNode;

{ Функция вычисления расстояния между двумя точками в пикселях }
function Distance(const p1, p2: TPoint): Integer;

{ Процедура добавления вершины в граф }
procedure AddNode(var G: TGraph; const C: TPoint);

{ Процедура добавления рёбер в граф }
procedure AddLink(var G: TGraph; u, v: Integer);

{ Процедура инициализации графа }
procedure InitializeGraph(var G: TGraph);

{ Процедура очищения графа }
procedure DestroyGraph(var G: TGraph);

{ Функция поиска в глубину }
function DFS(const G: TGraph; u, v: Integer): TPList;

implementation

function Distance(const p1, p2: TPoint): Integer;
begin
  Result := Round(Sqrt(Sqr(p2.x - p1.x) + Sqr(p2.y - p1.y)));
end;

function GetByNumber;
begin
  Result := G.Head;

  // Цикл А1. Поиск вершины с данным номером
  while Result.Number <> v do
  begin
    Result := Result.Next;
  end; // Конец А1

end;

function GetByPoint;
var
  Node: TPNode;
  Found: TPNode;
  isFound: Boolean;
  x, y: Integer;
begin
  Node := G.Head;
  isFound := False;
  Found := nil;

  // Цикл А1. Поиск последней вершины с близкими координатами
  while Node <> nil do
  begin
    isFound := Distance(Node.Center, P) <= 20;
    if isFound then
      Found := Node;
    Node := Node.Next;
  end; // Конец А1

  Result := Found;
end;

procedure AddNode;
var
  Node: TPNode;
begin
  Inc(G.Order);

  // Инициализация новой вершины
  New(Node);
  with Node^ do
  begin
    Center := C;
    Number := G.Order;
    Head := nil;
    Next := nil;
  end;

  // Инициализация указателя на новую вершину
  if G.Head = nil then
    G.Head := Node
  else
    G.Tail.Next := Node;

  // Перезапись хвоста
  G.Tail := Node;

end;

procedure AddLink;
var
  Node: TPNode;
  Prev, Curr: TPList;
  isFound: Boolean;
begin

  // Получение вершины
  Node := GetByNumber(G, u);

  // Инициализация нового соседа
  New(Curr);
  Curr.Elem := v;

  // Получение начального соседа
  Prev := Node.Head;

  // Список смежности был пуст или голова была больше нового соседа
  if (Prev = nil) or (Prev.Elem > v) then
    Push(Node.Head, v)
  else
  begin

    // Цикл А1. Поиск места вставки (предыдущего соседа)
    isFound := (Prev.Next = nil) or (Prev.Next.Elem > v);
    while not isFound do
    begin
      Prev := Prev.Next;
      isFound := (Prev.Next = nil) or (Prev.Next.Elem > v);
    end;

    // Вставка нового соседа
    Curr.Next := Prev.Next;
    Prev.Next := Curr;

  end; // Конец if

end;

procedure InitializeGraph;
begin
  G.Head := nil;
  G.Tail := nil;
  G.Order := 0;
end;

procedure DestroyGraph;
var
  Node: TPNode;
  AdjNode: TPAdjList;
begin

  // Цикл А1. Освобождение списка вершин
  while G.Head <> nil do
  begin
    Node := G.Head;

    // Цикл А2. Освобождение списка соседей вершины
    while Node.Head <> nil do
    begin
      AdjNode := Node.Head;
      Node.Head := Node.Head.Next;
      Dispose(AdjNode);
    end; // Конец А2

    G.Head := G.Head.Next;
    Dispose(Node);
  end; // Конец А1
end;

function RestorePath(const Parents: array of Cardinal; u, v: Integer): TPList;
begin

  InitializeList(Result); // Инициализация стека

  // Цикл А1. Добавление очередного предка в пути
  while u <> v do
  begin
    Push(Result, v);
    v := Parents[v - 1];
  end; // Конец А1
  Push(Result, u);

end;

function DFS(const G: TGraph; u, v: Integer): TPList;
var
  Node: TPNode;
  Neighbour: TPAdjList;
  Stack: TStack;
  isFound: Boolean;
  Parents: Array of Cardinal;
  isVisited: Array of Boolean;
  i: Integer;
  w, StartCopy: Cardinal;
begin

  // Инициализация стека
  InitializeList(Stack);
  Push(Stack, u);

  // Инициализация массива меток
  SetLength(isVisited, G.Order);
  for i := Low(isVisited) to High(isVisited) do
    isVisited[i] := False;

  // Инциализация массива предков
  SetLength(Parents, G.Order);
  Parents[u] := 0;

  // Цикл А1. Извлечение элементов из стека до нахождения вершины
  StartCopy := u; // Сохранение начала пути
  isFound := u = v;
  while not(isEmpty(Stack) or isFound) do
  begin

    // Цикл А2. Сохранение соседей в стек
    Node := GetByNumber(G, u);
    Neighbour := Node.Head;
    while Neighbour <> nil do
    begin
      w := Neighbour.Elem; // Получение очередного соседа

      // Добавление в стек непосещённых вершин
      if not isVisited[w - 1] then
      begin
        Push(Stack, w);
        Parents[w - 1] := u; // Сохранение пути
      end; // Конец if

      Neighbour := Neighbour.Next; // Переход к следующему соседу
    end; // Конец А2

    // Посещение вершины
    u := Pop(Stack);
    isFound := u = v;
    isVisited[u - 1] := true;

  end; // Конец А1

  DestroyList(Stack); // Очистка стека

  // Восстановление пути
  InitializeList(Result);
  if isFound then
    Result := RestorePath(Parents, StartCopy, v);
end;

end.
